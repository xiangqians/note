<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.xiangqian.note.mapper.NoteMapper">

    <insert id="create" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO `note`
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="pid != null">`pid`,</if>
            <if test="name != null">`name`,</if>
            <if test="type != null">`type`,</if>
            <if test="size != null">`size`,</if>
            <if test="delete != null">`delete`,</if>
            <if test="createTime != null">`create_time`,</if>
            <if test="updateTime != null">`update_time`,</if>
        </trim>
        <trim prefix="VALUES (" suffix=")" suffixOverrides=",">
            <if test="pid != null">#{pid},</if>
            <if test="name != null">#{name},</if>
            <if test="type != null">#{type},</if>
            <if test="size != null">#{size},</if>
            <if test="delete != null">#{delete},</if>
            <if test="createTime != null">#{createTime},</if>
            <if test="updateTime != null">#{updateTime},</if>
        </trim>
    </insert>

    <update id="deleteById">
        UPDATE `note` SET `delete` = 1  WHERE `id` = #{id}
    </update>

    <update id="updateById">
        UPDATE `note`
        <set>
            <if test="pid != null">`pid` = #{pid},</if>
            <if test="name != null">`name` = #{name},</if>
            <if test="type != null">`type` = #{type},</if>
            <if test="size != null">`size` = #{size},</if>
            <if test="delete != null">`delete` = #{delete},</if>
            <if test="createTime != null">`create_time` = #{createTime},</if>
            <if test="updateTime != null">`update_time` = #{updateTime},</if>
        </set>
        WHERE `id` = #{id}
    </update>

    <select id="getById" resultType="org.xiangqian.note.entity.NoteEntity">
        SELECT `id`, `pid`, `name`, `type`, `size`, `delete`, `create_time`, `update_time`
        FROM `note`
        WHERE `delete` = 0 AND `id` = #{id}
    </select>

    <select id="getFolderList" resultType="org.xiangqian.note.entity.NoteEntity">
        SELECT `id`, `pid`, `name`, `type`, `size`, `delete`, `create_time`, `update_time`
        FROM `note`
        WHERE `delete` = 0 AND `type` = 'folder'
    </select>

    <select id="getByPidAndId" resultType="org.xiangqian.note.entity.NoteEntity">
        WITH RECURSIVE `tmp`(`id`, `pid`, `name`, `type`, `size`, `delete`, `create_time`, `update_time`) AS (
            SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
            FROM `note` n
            WHERE n.`delete` = 0 AND n.`pid` = #{pid}
            UNION ALL
            SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
            FROM `note` n INNER JOIN `tmp` ON n.pid = `tmp`.id
            WHERE n.`delete` = 0
        )
        SELECT * FROM tmp WHERE `id` = #{id} LIMIT 1
    </select>

    <select id="getDeletedId" resultType="java.lang.Long">
        SELECT `id` FROM `note` WHERE `delete` = 1 LIMIT 1
    </select>

    <select id="getSizeById" resultType="Long">
        WITH RECURSIVE `tmp`(`id`, `pid`, `name`, `type`, `size`, `delete`, `create_time`, `update_time`) AS (
            SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
            FROM `note` n
            WHERE n.`delete` = 0 AND n.`id` = #{id}
            UNION ALL
            SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
            FROM `note` n
            INNER JOIN `tmp` ON n.pid = `tmp`.id
            WHERE n.`delete` = 0
        )
        SELECT IFNULL(SUM(`size`), 0) FROM tmp WHERE `type` != 'folder'
    </select>

    <select id="getParentListById" resultType="org.xiangqian.note.entity.NoteEntity">
        WITH RECURSIVE `tmp`(`id`, `pid`, `name`, `type`, `size`, `delete`, `create_time`, `update_time`) AS (
            SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
            FROM `note` n
            WHERE n.`delete` = 0 AND n.`id` = #{id}
            UNION ALL
            SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
            FROM `note` n
            INNER JOIN `tmp` ON n.`id` = `tmp`.`pid`
            WHERE n.`delete` = 0
        )
        SELECT * FROM `tmp`
    </select>

    <select id="getChildIdListByPid" resultType="java.lang.Long">
        WITH RECURSIVE `tmp`(`id`, `pid`, `name`, `type`, `size`, `delete`, `create_time`, `update_time`) AS (
            SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
            FROM `note` n
            WHERE n.`delete` = 0 AND n.`pid` = #{pid}
            UNION ALL
            SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
            FROM `note` n
            INNER JOIN `tmp` ON n.pid = `tmp`.id
            WHERE n.`delete` = 0
        )
        SELECT `id` FROM `tmp` WHERE `type` = 'md'
    </select>

    <select id="getChildList" resultType="org.xiangqian.note.entity.NoteEntity">
        <choose>
            <!-- 查询指定目录下所有子目录和子文件 -->
            <when test="include != null and include">
                WITH RECURSIVE `tmp`(`id`, `pid`, `name`, `type`, `size`, `delete`, `create_time`, `update_time`) AS (
                    SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
                    FROM `note` n
                    WHERE n.`delete` = 0 AND n.`pid` = #{pid}
                    UNION ALL
                    SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
                    FROM `note` n
                    INNER JOIN `tmp` ON n.pid = `tmp`.id
                    WHERE n.`delete` = 0
                )
                SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`,
                (CASE    WHEN n1.`id` IS NOT NULL THEN n1.`id` || '[' || LENGTH(n1.`name`) || ']' || n1.`name`
                || (CASE WHEN n2.`id` IS NOT NULL THEN n2.`id` || '[' || LENGTH(n2.`name`) || ']' || n2.`name`
                || (CASE WHEN n3.`id` IS NOT NULL THEN n3.`id` || '[' || LENGTH(n3.`name`) || ']' || n3.`name`
                || (CASE WHEN n4.`id` IS NOT NULL THEN n4.`id` || '[' || LENGTH(n4.`name`) || ']' || n4.`name`
                || (CASE WHEN n5.`id` IS NOT NULL THEN n5.`id` || '[' || LENGTH(n5.`name`) || ']' || n5.`name`
                || (CASE WHEN n6.`id` IS NOT NULL THEN n6.`id` || '[' || LENGTH(n6.`name`) || ']' || n6.`name`
                || (CASE WHEN n7.`id` IS NOT NULL THEN n7.`id` || '[' || LENGTH(n7.`name`) || ']' || n7.`name`
                || (CASE WHEN n8.`id` IS NOT NULL THEN n8.`id` || '[' || LENGTH(n8.`name`) || ']' || n8.`name`
                || (CASE WHEN n9.`id` IS NOT NULL THEN n9.`id` || '[' || LENGTH(n9.`name`) || ']' || n9.`name`
                || (CASE WHEN n10.`id` IS NOT NULL THEN n10.`id` || '[' || LENGTH(n10.`name`) || ']' || n10.`name`
                ELSE '' END)
                ELSE '' END)
                ELSE '' END)
                ELSE '' END)
                ELSE '' END)
                ELSE '' END)
                ELSE '' END)
                ELSE '' END)
                ELSE '' END)
                ELSE '' END) AS 'parent_list_str'
                FROM `tmp` n
                LEFT JOIN `note` n1 ON n1.`delete` = 0 AND n1.`id` = n.`pid`
                LEFT JOIN `note` n2 ON n2.`delete` = 0 AND n2.`id` = n1.`pid`
                LEFT JOIN `note` n3 ON n3.`delete` = 0 AND n3.`id` = n2.`pid`
                LEFT JOIN `note` n4 ON n4.`delete` = 0 AND n4.`id` = n3.`pid`
                LEFT JOIN `note` n5 ON n5.`delete` = 0 AND n5.`id` = n4.`pid`
                LEFT JOIN `note` n6 ON n6.`delete` = 0 AND n6.`id` = n5.`pid`
                LEFT JOIN `note` n7 ON n7.`delete` = 0 AND n7.`id` = n6.`pid`
                LEFT JOIN `note` n8 ON n8.`delete` = 0 AND n8.`id` = n7.`pid`
                LEFT JOIN `note` n9 ON n9.`delete` = 0 AND n9.`id` = n8.`pid`
                LEFT JOIN `note` n10 ON n10.`delete` = 0 AND n10.`id` = n9.`pid`
                WHERE n.`delete` = 0
            </when>
            <!-- 查询当前目录 -->
            <otherwise>
                SELECT n.`id`, n.`pid`, n.`name`, n.`type`, n.`size`, n.`delete`, n.`create_time`, n.`update_time`
                FROM `note` n
                WHERE n.`delete` = 0
                AND n.pid = #{pid}
            </otherwise>
        </choose>
        <if test="ids != null">
            AND n.`id` IN <foreach item="id" collection="ids" open="(" close=")" separator=",">${id}</foreach>
        </if>
        <!-- sqlite在模糊查询时大小写不敏感 -->
        <if test="name != null">
            AND n.`name` LIKE '%' || #{name} || '%'
        </if>
        <if test="type != null">
            AND n.`type` = #{type}
        </if>
        GROUP BY n.`id`
        ORDER BY
        (CASE n.`type`
        WHEN 'folder' THEN 1
        WHEN 'md' THEN 2
        WHEN 'pdf' THEN 3
        WHEN 'zip' THEN 4
        <!-- 其他类型排序规则 -->
        ELSE 5
        END),
        (CASE
            <if test="sort != null">
                <foreach index="index" item="e" collection="sort">
                    WHEN n.`name` LIKE '${e}' THEN ${index}+1
                </foreach>
            </if>
            WHEN CAST(n.`name` AS INTEGER) > 0 THEN CAST(n.`name` AS INTEGER)+10000
            ELSE 20000
        END),
        n.`name`,
        (CASE WHEN n.`update_time` > n.`create_time` THEN n.`update_time` ELSE n.`create_time` END) DESC
    </select>

    <select id="countChildrenByPid" resultType="java.lang.Integer">
        SELECT COUNT(1) FROM `note` WHERE `delete` = 0 AND `pid` = #{pid}
    </select>

    <select id="getList" resultType="org.xiangqian.note.entity.NoteEntity">
        SELECT `id`, `pid`, `name`, `type`, `size`, `delete`, `create_time`, `update_time`
        FROM `note`
    </select>

</mapper>
